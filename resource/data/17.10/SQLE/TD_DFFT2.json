{
    "FunctionCategory": "Temporal and Spatial",
    "JSONVersion": "1",
    "FuncRName": "td_DFFT2",
    "MaxInputFiles": 1,
    "IsPlottable": true,
    "InputFmt": false,
    "OutputFmt": [
        {
            "name": "OutputFormat",
            "permittedValues": [
                "CONTENT(COMPLEX)",
                "CONTENT(AMPL_PHASE_RADIANS)",
                "CONTENT(AMPL_PHASE_DEGREES)",
                "CONTENT(AMPL_PHASE)",
                "CONTENT(MULTIVAR_COMPLEX)",
                "CONTENT(MULTIVAR_AMPL_PHASE_RADIANS)",
                "CONTENT(MULTIVAR_AMPL_PHASE_DEGREES)",
                "CONTENT(MULTIVAR_AMPL_PHASE)"
            ],
            "langName": "output_fmt_content",
            "allowsLists": false,
            "Type": "string",
            "datatype": "STRING",
            "description": "The OUTPUT_FMT (CONTENT()) construct can be used by the data scientist to choose how they would like their Fourier coefficients to be output.  The can use CONTENT(COMPLEX) or CONTENT(MULTIVAR_COMPLEX) to request the Fourier coefficients in rectangular form.  Alternatively, they can use CONTENT(AMPL_PHASE_RADIANS), CONTENT(AMPL_PHASE_DEGREES), CONTENT(AMPL_PHASE), CONTENT(MULTIVAR_AMPL_PHASE_RADIANS), CONTENT(MULTIVAR_AMPL_PHASE), or CONTENT(MULTIVAR_AMPL_PHASE_DEGREES) to request that the Fourier coefficients be output in the polar form; and to further request the phase to be output in radians or degrees. AMPL_PHASE is one of the permitted values, it is synonymous with AMPL_PHASE_RADIANS. Similarly MULTIVAR_AMPL_PHASE is equivalent to MULTIVAR_AMPL_PHASE_RADIANS.The default value is dependent on the datatype of the input series; a single var input will generate COMPLEX output CONTENT by default; a multi var input will generate MULTIVAR_COMPLEX output CONTENT by default.",
            "isRequired": false,
            "rOrderNum": 3
        },
        {
            "Name": "ROW_MAJOR",
            "Type": "integer",
            "Optional": true,
            "DefaultValue": 1,
            "PermittedValues": [
                0,
                1
            ],
            "Description": [
                "The data scientist may explicity declare whether they want the matrix output in a row-major-centric or column-major-centric manner, via the OUTPUT_FMT(ROW_MAJOR()) construct."
            ],
            "LangName": "output_fmt_row_major"
        }
    ],
    "function_type": "uaf",
    "json_schema_major_version": "1",
    "json_schema_minor_version": "2",
    "json_content_version": "1",
    "function_name": "TD_DFFT2",
    "function_r_name": "aa.td_dfft2",
    "ref_function_r_name": "aa.td_dfft2",
    "function_version": "...",
    "short_description": "This function executes the two-dimensional Fourier Transform ",
    "long_description": "TD_DFFT2 takes a matrix (two-dimensional array) as an input, and returns a result matrix whose elements are the compute two-dimension Fourier Coefficients for the input matrix. The coefficients can be output as complex numbers in either rectangular (real, imaginary) or polar (amplitude, phase) form.",
    "input_tables": [
        {
            "LangName": "data or object or newdata or ... --> Langauges team can work with UAF team to come up with this field",
            "requiredInputKind": [
                "PartitionByNone"
            ],
            "isOrdered": false,
            "partitionByOne": false,
            "alternateNames": [],
            "isRequired": true,
            "description": "This function executes the two-dimensional Fourier Transform against a logical matrix having elements which are either real numbers or complex numbers.",
            "rDescription": "This function executes the two-dimensional Fourier Transform against a logical matrix having elements which are either real numbers or complex numbers.",
            "datatype": "TABLE_ALIAS",
            "allowsLists": false,
            "name": "Input",
            "rName": "Input",
            "useInR": true,
            "rOrderNum": 1,
            "uaf": {
                "requiredUafKind": [
                    "ART",
                    "MATRIX"
                ],
                "is_row_sequence": "SEQUENCE",
                "is_col_sequence": "SEQUENCE",
                "row_axis_name": "",
                "column_axis_name": "",
                "id_name": "",
                "id_sequence": "",
                "payload_fields": "",
                "payload_content": "",
                "layer": "",
                "where": "",
                "time_duration": "",
                "time_zero": "",
                "time_type": "",
                "seq_zero": "",
                "interval": "Off",
                "details": true,
                "instance_names": "",
                "data_type": "",
                "payload_start_value": "",
                "payload_offset_value": "",
                "payload_num_entries": "",
                "index": 0
            },
            "uafType": ""
        }
    ],
    "output_tables": [
        {
            "Type": "ART",
            "PrimaryLayer": true,
            "LayerName": "ARTPRIMARY",
            "ResultTableColumnTypes": [
                "integer",
                "integer",
                "float",
                "float"
            ],
            "LangName": "data or object or newdata or ... --> Langauges team can work with UAF team to come up with this field",
            "isOutputTable": true,
            "omitPossible": true,
            "partitionByOne": false,
            "alternateNames": [],
            "isRequired": false,
            "description": "The TD_DFFT2 returns ONLY a Primary Result set.  There is no Secondary or Tertiary Result set returned by this function.  The Primary Result set can be retrieved by issuing a SELECT statement against the analytical result table containing the results.",
            "rDescription": "The TD_DFFT2 returns ONLY a Primary Result set.  There is no Secondary or Tertiary Result set returned by this function.  The Primary Result set can be retrieved by issuing a SELECT statement against the analytical result table containing the results.",
            "datatype": "TABLE_NAME",
            "allowsLists": false,
            "name": "OutputTable1",
            "rName": "OutputTable1",
            "useInR": true,
            "rOrderNum": 2
        }
    ],
    "argument_clauses": [
        {
            "name": "OutputFormat",
            "permittedValues": [
                "CONTENT(COMPLEX)",
                "CONTENT(AMPL_PHASE_RADIANS)",
                "CONTENT(AMPL_PHASE_DEGREES)",
                "CONTENT(AMPL_PHASE)",
                "CONTENT(MULTIVAR_COMPLEX)",
                "CONTENT(MULTIVAR_AMPL_PHASE_RADIANS)",
                "CONTENT(MULTIVAR_AMPL_PHASE_DEGREES)",
                "CONTENT(MULTIVAR_AMPL_PHASE)"
            ],
            "langName": "output_fmt_content",
            "allowsLists": false,
            "Type": "string",
            "datatype": "STRING",
            "description": "The OUTPUT_FMT (CONTENT()) construct can be used by the data scientist to choose how they would like their Fourier coefficients to be output.  The can use CONTENT(COMPLEX) or CONTENT(MULTIVAR_COMPLEX) to request the Fourier coefficients in rectangular form.  Alternatively, they can use CONTENT(AMPL_PHASE_RADIANS), CONTENT(AMPL_PHASE_DEGREES), CONTENT(AMPL_PHASE), CONTENT(MULTIVAR_AMPL_PHASE_RADIANS), CONTENT(MULTIVAR_AMPL_PHASE), or CONTENT(MULTIVAR_AMPL_PHASE_DEGREES) to request that the Fourier coefficients be output in the polar form; and to further request the phase to be output in radians or degrees. AMPL_PHASE is one of the permitted values, it is synonymous with AMPL_PHASE_RADIANS. Similarly MULTIVAR_AMPL_PHASE is equivalent to MULTIVAR_AMPL_PHASE_RADIANS.The default value is dependent on the datatype of the input series; a single var input will generate COMPLEX output CONTENT by default; a multi var input will generate MULTIVAR_COMPLEX output CONTENT by default.",
            "isRequired": false,
            "rOrderNum": 3
        },
        {
            "name": "ZERO_PADDING_OK",
            "defaultValue": 1,
            "permittedValues": [
                0,
                1
            ],
            "allowsLists": false,
            "Type": "integer",
            "datatype": "INTEGER",
            "description": "Optional Parameter.  Determines whether it is OK to add zeros to both the 'row-series' and 'column-series' comprising the matrix.  Zeros are added to the end of  these series to achieve a more efficient computation of the FFT coefficients.  A value of '1' means true; a value of '0' means false.  Default is true.",
            "isRequired": false,
            "rOrderNum": 4
        },
        {
            "name": "FREQ_STYLE",
            "defaultValue": "K_INTEGRAL",
            "permittedValues": [
                "K_INTEGRAL",
                "K_SAMPLE_RATE",
                "K_RADIANS",
                "K_HERTZ"
            ],
            "allowsLists": false,
            "Type": "string",
            "datatype": "STRING",
            "description": "Optional Parameter.  Determines format/values associated with the x-axis (ROW_I index) and y-axis (COLUMN_I index) of the output.  Choices are: 'K_INTEGRAL', an integer representation.; 'K_SAMPLE_RATE': normalized to 'Number Entries', ranges from -0.5 to +0.5;  'K_RADIANS', ranges from -PI to +PI; and, 'K_HERTZ', must be used in conjunction with the 'HERTZ_SAMPLE_RATE', this represents the frequency in hertz. The Default is 'K_INTEGRAL'. ",
            "isRequired": false,
            "rOrderNum": 5
        },
        {
            "name": "HERTZ_SAMPLE_RATE",
            "lowerBound": 0,
            "lowerBoundType": "INCLUSIVE",
            "allowNaN": false,
            "allowsLists": false,
            "Type": "float",
            "datatype": "DOUBLE",
            "description": "Optional Parameter.  Only valid with a FREQ_STYLE(K_HERTZ).  A Floating point constant representing the sample rate, in hertz.  A value of 10000.0 means that the sample points were obtained by sampling at a rate of 10,000 hertz.  This hertz interpretation will be applied to both the ROW_I and COLUMN_I indexes.",
            "isRequired": false,
            "rOrderNum": 6
        },
        {
            "name": "ALGORITHM",
            "permittedValues": [
                "COOLEY_TUKEY",
                "SINGLETON"
            ],
            "allowsLists": false,
            "Type": "string",
            "datatype": "STRING",
            "description": "Optional Parameter.  Bypasses the internal DFFT Planner and influences the core DFFT algorithm associated with the primary DFFT calculation.  Choices are: 'COOLEY_TUKEY', or 'SINGLETON'.  When this parameter is NOT PRESENT.  The internal DFFT 'Planner' will select the most efficient algorithm for the operation. ",
            "isRequired": false,
            "rOrderNum": 7
        },
        {
            "name": "HUMAN_READABLE",
            "defaultValue": 1,
            "permittedValues": [
                0,
                1
            ],
            "allowsLists": false,
            "Type": "integer",
            "datatype": "INTEGER",
            "description": "Optional Parameter.  Determines whether the produced output rows comprising the matrix are in a human-readable / plottable form; or if they are output in the raw-form, which is equivalent to how the 'R' and 'PYTHON' programs would output the results.     A value of '1' means true, output in human readable form; a value of '0' means false, output in raw form.  Default is true \u2013 output in Human Readable format.",
            "isRequired": false,
            "rOrderNum": 8
        }
    ]
}
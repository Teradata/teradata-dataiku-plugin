{
    "JSONVersion": "1",
    "FuncRName": "...",
    "MaxInputFiles": 1,
    "IsPlottable": true,
    "InputFmt": false,
    "OutputFmt": false,
    "function_type": "uaf",
    "json_schema_major_version": "1",
    "json_schema_minor_version": "2",
    "json_content_version": "1",
    "function_name": "TD_PLOT",
    "function_r_name": "aa.td_plot",
    "ref_function_r_name": "aa.td_plot",
    "function_version": "...",
    "short_description": "Draw plots from data",
    "long_description": "This function provides the ability to generate 'on-demand' plots.  The generated plots can be either univariate, multivariate, or composite in nature. The chosen implementation\u2019s output and style specification closely match Matplotlib ( https://matplotlib.org/ ), an extremely popular Python plotting library. The primary purpose for this decision is to jump start existing Matplotlib users into TD_PLOT usage.  However, the Teradata implementation is a completely independent and separate one based on C/C++.",
    "input_tables": [
        {
            "LangName": "data or object or newdata or ... --> Langauges team can work with UAF team to come up with this field",
            "requiredInputKind": [
                "PartitionByNone"
            ],
            "isOrdered": false,
            "partitionByOne": false,
            "alternateNames": [],
            "isRequired": true,
            "description": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "rDescription": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "datatype": "TABLE_ALIAS",
            "allowsLists": false,
            "name": "Input",
            "rName": "Input",
            "useInR": true,
            "rOrderNum": 1,
            "uaf": {
                "requiredUafKind": [
                    "SERIES",
                    "MATRIX"
                ],
                "is_row_sequence": "SEQUENCE",
                "is_col_sequence": "SEQUENCE",
                "row_axis_name": "",
                "column_axis_name": "",
                "id_name": "",
                "id_sequence": "",
                "payload_fields": "",
                "payload_content": "",
                "layer": "",
                "where": "",
                "time_duration": "",
                "time_zero": "",
                "time_type": "",
                "seq_zero": "",
                "interval": "Off",
                "details": true,
                "instance_names": "",
                "data_type": "",
                "payload_start_value": "",
                "payload_offset_value": "",
                "payload_num_entries": "",
                "index": 0
            },
            "uafType": ""
        },
        {
            "LangName": "data or object or newdata or ... --> Langauges team can work with UAF team to come up with this field",
            "name": "Input2",
            "requiredInputKind": [
                "PartitionByNone"
            ],
            "isOrdered": false,
            "partitionByOne": false,
            "alternateNames": [],
            "isRequired": true,
            "description": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "rDescription": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "datatype": "TABLE_ALIAS",
            "allowsLists": false,
            "rName": "Input2",
            "useInR": true,
            "rOrderNum": 2,
            "uaf": {
                "requiredUafKind": [
                    "SERIES",
                    "MATRIX"
                ],
                "is_row_sequence": "SEQUENCE",
                "is_col_sequence": "SEQUENCE",
                "row_axis_name": "",
                "column_axis_name": "",
                "id_name": "",
                "id_sequence": "",
                "payload_fields": "",
                "payload_content": "",
                "layer": "",
                "where": "",
                "time_duration": "",
                "time_zero": "",
                "time_type": "",
                "seq_zero": "",
                "interval": "Off",
                "details": true,
                "instance_names": "",
                "data_type": "",
                "payload_start_value": "",
                "payload_offset_value": "",
                "payload_num_entries": "",
                "index": 1
            },
            "uafType": ""
        },
        {
            "LangName": "data or object or newdata or ... --> Langauges team can work with UAF team to come up with this field",
            "name": "Input3",
            "requiredInputKind": [
                "PartitionByNone"
            ],
            "isOrdered": false,
            "partitionByOne": false,
            "alternateNames": [],
            "isRequired": true,
            "description": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "rDescription": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "datatype": "TABLE_ALIAS",
            "allowsLists": false,
            "rName": "Input3",
            "useInR": true,
            "rOrderNum": 3,
            "uaf": {
                "requiredUafKind": [
                    "SERIES",
                    "MATRIX"
                ],
                "is_row_sequence": "SEQUENCE",
                "is_col_sequence": "SEQUENCE",
                "row_axis_name": "",
                "column_axis_name": "",
                "id_name": "",
                "id_sequence": "",
                "payload_fields": "",
                "payload_content": "",
                "layer": "",
                "where": "",
                "time_duration": "",
                "time_zero": "",
                "time_type": "",
                "seq_zero": "",
                "interval": "Off",
                "details": true,
                "instance_names": "",
                "data_type": "",
                "payload_start_value": "",
                "payload_offset_value": "",
                "payload_num_entries": "",
                "index": 2
            },
            "uafType": ""
        },
        {
            "LangName": "data or object or newdata or ... --> Langauges team can work with UAF team to come up with this field",
            "name": "Input4",
            "requiredInputKind": [
                "PartitionByNone"
            ],
            "isOrdered": false,
            "partitionByOne": false,
            "alternateNames": [],
            "isRequired": true,
            "description": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "rDescription": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "datatype": "TABLE_ALIAS",
            "allowsLists": false,
            "rName": "Input4",
            "useInR": true,
            "rOrderNum": 4,
            "uaf": {
                "requiredUafKind": [
                    "SERIES",
                    "MATRIX"
                ],
                "is_row_sequence": "SEQUENCE",
                "is_col_sequence": "SEQUENCE",
                "row_axis_name": "",
                "column_axis_name": "",
                "id_name": "",
                "id_sequence": "",
                "payload_fields": "",
                "payload_content": "",
                "layer": "",
                "where": "",
                "time_duration": "",
                "time_zero": "",
                "time_type": "",
                "seq_zero": "",
                "interval": "Off",
                "details": true,
                "instance_names": "",
                "data_type": "",
                "payload_start_value": "",
                "payload_offset_value": "",
                "payload_num_entries": "",
                "index": 3
            },
            "uafType": ""
        },
        {
            "LangName": "data or object or newdata or ... --> Langauges team can work with UAF team to come up with this field",
            "name": "Input5",
            "requiredInputKind": [
                "PartitionByNone"
            ],
            "isOrdered": false,
            "partitionByOne": false,
            "alternateNames": [],
            "isRequired": true,
            "description": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "rDescription": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "datatype": "TABLE_ALIAS",
            "allowsLists": false,
            "rName": "Input5",
            "useInR": true,
            "rOrderNum": 5,
            "uaf": {
                "requiredUafKind": [
                    "SERIES",
                    "MATRIX"
                ],
                "is_row_sequence": "SEQUENCE",
                "is_col_sequence": "SEQUENCE",
                "row_axis_name": "",
                "column_axis_name": "",
                "id_name": "",
                "id_sequence": "",
                "payload_fields": "",
                "payload_content": "",
                "layer": "",
                "where": "",
                "time_duration": "",
                "time_zero": "",
                "time_type": "",
                "seq_zero": "",
                "interval": "Off",
                "details": true,
                "instance_names": "",
                "data_type": "",
                "payload_start_value": "",
                "payload_offset_value": "",
                "payload_num_entries": "",
                "index": 4
            },
            "uafType": ""
        },
        {
            "LangName": "data or object or newdata or ... --> Langauges team can work with UAF team to come up with this field",
            "name": "Input6",
            "requiredInputKind": [
                "PartitionByNone"
            ],
            "isOrdered": false,
            "partitionByOne": false,
            "alternateNames": [],
            "isRequired": true,
            "description": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "rDescription": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "datatype": "TABLE_ALIAS",
            "allowsLists": false,
            "rName": "Input6",
            "useInR": true,
            "rOrderNum": 6,
            "uaf": {
                "requiredUafKind": [
                    "SERIES",
                    "MATRIX"
                ],
                "is_row_sequence": "SEQUENCE",
                "is_col_sequence": "SEQUENCE",
                "row_axis_name": "",
                "column_axis_name": "",
                "id_name": "",
                "id_sequence": "",
                "payload_fields": "",
                "payload_content": "",
                "layer": "",
                "where": "",
                "time_duration": "",
                "time_zero": "",
                "time_type": "",
                "seq_zero": "",
                "interval": "Off",
                "details": true,
                "instance_names": "",
                "data_type": "",
                "payload_start_value": "",
                "payload_offset_value": "",
                "payload_num_entries": "",
                "index": 5
            },
            "uafType": ""
        },
        {
            "LangName": "data or object or newdata or ... --> Langauges team can work with UAF team to come up with this field",
            "name": "Input7",
            "requiredInputKind": [
                "PartitionByNone"
            ],
            "isOrdered": false,
            "partitionByOne": false,
            "alternateNames": [],
            "isRequired": true,
            "description": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "rDescription": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "datatype": "TABLE_ALIAS",
            "allowsLists": false,
            "rName": "Input7",
            "useInR": true,
            "rOrderNum": 7,
            "uaf": {
                "requiredUafKind": [
                    "SERIES",
                    "MATRIX"
                ],
                "is_row_sequence": "SEQUENCE",
                "is_col_sequence": "SEQUENCE",
                "row_axis_name": "",
                "column_axis_name": "",
                "id_name": "",
                "id_sequence": "",
                "payload_fields": "",
                "payload_content": "",
                "layer": "",
                "where": "",
                "time_duration": "",
                "time_zero": "",
                "time_type": "",
                "seq_zero": "",
                "interval": "Off",
                "details": true,
                "instance_names": "",
                "data_type": "",
                "payload_start_value": "",
                "payload_offset_value": "",
                "payload_num_entries": "",
                "index": 6
            },
            "uafType": ""
        },
        {
            "LangName": "data or object or newdata or ... --> Langauges team can work with UAF team to come up with this field",
            "name": "Input8",
            "requiredInputKind": [
                "PartitionByNone"
            ],
            "isOrdered": false,
            "partitionByOne": false,
            "alternateNames": [],
            "isRequired": true,
            "description": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "rDescription": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "datatype": "TABLE_ALIAS",
            "allowsLists": false,
            "rName": "Input8",
            "useInR": true,
            "rOrderNum": 8,
            "uaf": {
                "requiredUafKind": [
                    "SERIES",
                    "MATRIX"
                ],
                "is_row_sequence": "SEQUENCE",
                "is_col_sequence": "SEQUENCE",
                "row_axis_name": "",
                "column_axis_name": "",
                "id_name": "",
                "id_sequence": "",
                "payload_fields": "",
                "payload_content": "",
                "layer": "",
                "where": "",
                "time_duration": "",
                "time_zero": "",
                "time_type": "",
                "seq_zero": "",
                "interval": "Off",
                "details": true,
                "instance_names": "",
                "data_type": "",
                "payload_start_value": "",
                "payload_offset_value": "",
                "payload_num_entries": "",
                "index": 7
            },
            "uafType": ""
        },
        {
            "LangName": "data or object or newdata or ... --> Langauges team can work with UAF team to come up with this field",
            "name": "Input9",
            "requiredInputKind": [
                "PartitionByNone"
            ],
            "isOrdered": false,
            "partitionByOne": false,
            "alternateNames": [],
            "isRequired": true,
            "description": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "rDescription": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "datatype": "TABLE_ALIAS",
            "allowsLists": false,
            "rName": "Input9",
            "useInR": true,
            "rOrderNum": 9,
            "uaf": {
                "requiredUafKind": [
                    "SERIES",
                    "MATRIX"
                ],
                "is_row_sequence": "SEQUENCE",
                "is_col_sequence": "SEQUENCE",
                "row_axis_name": "",
                "column_axis_name": "",
                "id_name": "",
                "id_sequence": "",
                "payload_fields": "",
                "payload_content": "",
                "layer": "",
                "where": "",
                "time_duration": "",
                "time_zero": "",
                "time_type": "",
                "seq_zero": "",
                "interval": "Off",
                "details": true,
                "instance_names": "",
                "data_type": "",
                "payload_start_value": "",
                "payload_offset_value": "",
                "payload_num_entries": "",
                "index": 8
            },
            "uafType": ""
        },
        {
            "LangName": "data or object or newdata or ... --> Langauges team can work with UAF team to come up with this field",
            "name": "Input10",
            "requiredInputKind": [
                "PartitionByNone"
            ],
            "isOrdered": false,
            "partitionByOne": false,
            "alternateNames": [],
            "isRequired": true,
            "description": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "rDescription": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "datatype": "TABLE_ALIAS",
            "allowsLists": false,
            "rName": "Input10",
            "useInR": true,
            "rOrderNum": 10,
            "uaf": {
                "requiredUafKind": [
                    "SERIES",
                    "MATRIX"
                ],
                "is_row_sequence": "SEQUENCE",
                "is_col_sequence": "SEQUENCE",
                "row_axis_name": "",
                "column_axis_name": "",
                "id_name": "",
                "id_sequence": "",
                "payload_fields": "",
                "payload_content": "",
                "layer": "",
                "where": "",
                "time_duration": "",
                "time_zero": "",
                "time_type": "",
                "seq_zero": "",
                "interval": "Off",
                "details": true,
                "instance_names": "",
                "data_type": "",
                "payload_start_value": "",
                "payload_offset_value": "",
                "payload_num_entries": "",
                "index": 9
            },
            "uafType": ""
        },
        {
            "LangName": "data or object or newdata or ... --> Langauges team can work with UAF team to come up with this field",
            "name": "Input11",
            "requiredInputKind": [
                "PartitionByNone"
            ],
            "isOrdered": false,
            "partitionByOne": false,
            "alternateNames": [],
            "isRequired": true,
            "description": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "rDescription": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "datatype": "TABLE_ALIAS",
            "allowsLists": false,
            "rName": "Input11",
            "useInR": true,
            "rOrderNum": 11,
            "uaf": {
                "requiredUafKind": [
                    "SERIES",
                    "MATRIX"
                ],
                "is_row_sequence": "SEQUENCE",
                "is_col_sequence": "SEQUENCE",
                "row_axis_name": "",
                "column_axis_name": "",
                "id_name": "",
                "id_sequence": "",
                "payload_fields": "",
                "payload_content": "",
                "layer": "",
                "where": "",
                "time_duration": "",
                "time_zero": "",
                "time_type": "",
                "seq_zero": "",
                "interval": "Off",
                "details": true,
                "instance_names": "",
                "data_type": "",
                "payload_start_value": "",
                "payload_offset_value": "",
                "payload_num_entries": "",
                "index": 10
            },
            "uafType": ""
        },
        {
            "LangName": "data or object or newdata or ... --> Langauges team can work with UAF team to come up with this field",
            "name": "Input12",
            "requiredInputKind": [
                "PartitionByNone"
            ],
            "isOrdered": false,
            "partitionByOne": false,
            "alternateNames": [],
            "isRequired": true,
            "description": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "rDescription": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "datatype": "TABLE_ALIAS",
            "allowsLists": false,
            "rName": "Input12",
            "useInR": true,
            "rOrderNum": 12,
            "uaf": {
                "requiredUafKind": [
                    "SERIES",
                    "MATRIX"
                ],
                "is_row_sequence": "SEQUENCE",
                "is_col_sequence": "SEQUENCE",
                "row_axis_name": "",
                "column_axis_name": "",
                "id_name": "",
                "id_sequence": "",
                "payload_fields": "",
                "payload_content": "",
                "layer": "",
                "where": "",
                "time_duration": "",
                "time_zero": "",
                "time_type": "",
                "seq_zero": "",
                "interval": "Off",
                "details": true,
                "instance_names": "",
                "data_type": "",
                "payload_start_value": "",
                "payload_offset_value": "",
                "payload_num_entries": "",
                "index": 11
            },
            "uafType": ""
        },
        {
            "LangName": "data or object or newdata or ... --> Langauges team can work with UAF team to come up with this field",
            "name": "Input13",
            "requiredInputKind": [
                "PartitionByNone"
            ],
            "isOrdered": false,
            "partitionByOne": false,
            "alternateNames": [],
            "isRequired": true,
            "description": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "rDescription": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "datatype": "TABLE_ALIAS",
            "allowsLists": false,
            "rName": "Input13",
            "useInR": true,
            "rOrderNum": 13,
            "uaf": {
                "requiredUafKind": [
                    "SERIES",
                    "MATRIX"
                ],
                "is_row_sequence": "SEQUENCE",
                "is_col_sequence": "SEQUENCE",
                "row_axis_name": "",
                "column_axis_name": "",
                "id_name": "",
                "id_sequence": "",
                "payload_fields": "",
                "payload_content": "",
                "layer": "",
                "where": "",
                "time_duration": "",
                "time_zero": "",
                "time_type": "",
                "seq_zero": "",
                "interval": "Off",
                "details": true,
                "instance_names": "",
                "data_type": "",
                "payload_start_value": "",
                "payload_offset_value": "",
                "payload_num_entries": "",
                "index": 12
            },
            "uafType": ""
        },
        {
            "LangName": "data or object or newdata or ... --> Langauges team can work with UAF team to come up with this field",
            "name": "Input14",
            "requiredInputKind": [
                "PartitionByNone"
            ],
            "isOrdered": false,
            "partitionByOne": false,
            "alternateNames": [],
            "isRequired": true,
            "description": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "rDescription": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "datatype": "TABLE_ALIAS",
            "allowsLists": false,
            "rName": "Input14",
            "useInR": true,
            "rOrderNum": 14,
            "uaf": {
                "requiredUafKind": [
                    "SERIES",
                    "MATRIX"
                ],
                "is_row_sequence": "SEQUENCE",
                "is_col_sequence": "SEQUENCE",
                "row_axis_name": "",
                "column_axis_name": "",
                "id_name": "",
                "id_sequence": "",
                "payload_fields": "",
                "payload_content": "",
                "layer": "",
                "where": "",
                "time_duration": "",
                "time_zero": "",
                "time_type": "",
                "seq_zero": "",
                "interval": "Off",
                "details": true,
                "instance_names": "",
                "data_type": "",
                "payload_start_value": "",
                "payload_offset_value": "",
                "payload_num_entries": "",
                "index": 13
            },
            "uafType": ""
        },
        {
            "LangName": "data or object or newdata or ... --> Langauges team can work with UAF team to come up with this field",
            "name": "Input15",
            "requiredInputKind": [
                "PartitionByNone"
            ],
            "isOrdered": false,
            "partitionByOne": false,
            "alternateNames": [],
            "isRequired": true,
            "description": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "rDescription": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "datatype": "TABLE_ALIAS",
            "allowsLists": false,
            "rName": "Input15",
            "useInR": true,
            "rOrderNum": 15,
            "uaf": {
                "requiredUafKind": [
                    "SERIES",
                    "MATRIX"
                ],
                "is_row_sequence": "SEQUENCE",
                "is_col_sequence": "SEQUENCE",
                "row_axis_name": "",
                "column_axis_name": "",
                "id_name": "",
                "id_sequence": "",
                "payload_fields": "",
                "payload_content": "",
                "layer": "",
                "where": "",
                "time_duration": "",
                "time_zero": "",
                "time_type": "",
                "seq_zero": "",
                "interval": "Off",
                "details": true,
                "instance_names": "",
                "data_type": "",
                "payload_start_value": "",
                "payload_offset_value": "",
                "payload_num_entries": "",
                "index": 14
            },
            "uafType": ""
        },
        {
            "LangName": "data or object or newdata or ... --> Langauges team can work with UAF team to come up with this field",
            "name": "Input16",
            "requiredInputKind": [
                "PartitionByNone"
            ],
            "isOrdered": false,
            "partitionByOne": false,
            "alternateNames": [],
            "isRequired": true,
            "description": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "rDescription": "The input to TD_PLOT can either be a a SERIES_SPEC  or MATRIX_SPEC dependent on the plot type that is specified as a parameter. TD_PLOT currently supports the SEQUENCE style of index in the ROW_AXIS or COLUMN_AXIS clauses within the SERIES_SPEC or MATRIX_SPEC.",
            "datatype": "TABLE_ALIAS",
            "allowsLists": false,
            "rName": "Input16",
            "useInR": true,
            "rOrderNum": 16,
            "uaf": {
                "requiredUafKind": [
                    "SERIES",
                    "MATRIX"
                ],
                "is_row_sequence": "SEQUENCE",
                "is_col_sequence": "SEQUENCE",
                "row_axis_name": "",
                "column_axis_name": "",
                "id_name": "",
                "id_sequence": "",
                "payload_fields": "",
                "payload_content": "",
                "layer": "",
                "where": "",
                "time_duration": "",
                "time_zero": "",
                "time_type": "",
                "seq_zero": "",
                "interval": "Off",
                "details": true,
                "instance_names": "",
                "data_type": "",
                "payload_start_value": "",
                "payload_offset_value": "",
                "payload_num_entries": "",
                "index": 15
            },
            "uafType": ""
        }
    ],
    "output_tables": [
        {
            "Type": "ART",
            "PrimaryLayer": true,
            "LayerName": "ARTPRIMARY",
            "ResultTableColumnTypes": [
                "integer",
                "blob"
            ],
            "LangName": "data or object or newdata or ... --> Langauges team can work with UAF team to come up with this field",
            "isOutputTable": true,
            "omitPossible": true,
            "partitionByOne": false,
            "alternateNames": [],
            "isRequired": false,
            "description": "The following output formats are supported: Scalar Vector Graphics (SVG), Portable Network Graphics (PNG), and JPEG.Note that while TD_PLOT supports the INTO ART / INTO VOLATILE ART clause within the EXECUTE FUNCTION statement, the target ART table must match the following DDL, except the table and column names:CREATE TABLE imageTable, ART(ID INTEGER, IMAGE BLOB);",
            "rDescription": "The following output formats are supported: Scalar Vector Graphics (SVG), Portable Network Graphics (PNG), and JPEG.Note that while TD_PLOT supports the INTO ART / INTO VOLATILE ART clause within the EXECUTE FUNCTION statement, the target ART table must match the following DDL, except the table and column names:CREATE TABLE imageTable, ART(ID INTEGER, IMAGE BLOB);",
            "datatype": "TABLE_NAME",
            "allowsLists": false,
            "name": "OutputTable1",
            "rName": "OutputTable1",
            "useInR": true,
            "rOrderNum": 17
        }
    ],
    "argument_clauses": [
        {
            "name": "TITLE",
            "langName": "...",
            "allowsLists": false,
            "Type": "string",
            "datatype": "STRING",
            "description": "The main title of the plots / charts.",
            "isRequired": true,
            "rOrderNum": 18
        },
        {
            "name": "LAYOUT",
            "listType": "integer",
            "listSize": 2,
            "checkDuplicates": false,
            "langName": "...",
            "allowsLists": true,
            "Type": "integer",
            "datatype": "INTEGER",
            "description": "TD_PLOT composite chart uses a grid layout to place plots.  It evenly divides the image into an n-row, n-column grid.  Each plot can span multiple rows and columns. Not all grid cells need to be occupied. If it is specified, then the chart generated is composed of multiple plots.  The two integers specified are rows and columns.",
            "isRequired": true,
            "rOrderNum": 19
        },
        {
            "name": "PLOTS",
            "allowsLists": false,
            "Type": "GROUPSTART",
            "datatype": "GROUPSTART",
            "description": "Multiple plots can be specified.  It contains an array of plot entries, separated by comma.",
            "isRequired": false,
            "rOrderNum": 20
        },
        {
            "name": "PLOTS.ID",
            "defaultValue": 1,
            "lowerBound": 1,
            "lowerBoundType": "INCLUSIVE",
            "allowNaN": false,
            "allowsLists": false,
            "Type": "integer",
            "datatype": "INTEGER",
            "description": "It is used to identify the SERIES_SPEC that is used for the plot.  The value is the n-th of the SERIES_SPEC specified.  The value starts from 1.  If not specified, it is 1.",
            "isRequired": false,
            "rOrderNum": 21
        },
        {
            "name": "PLOTS.CELL",
            "listType": "integer",
            "listSize": 2,
            "checkDuplicates": false,
            "allowsLists": true,
            "Type": "integer",
            "datatype": "INTEGER",
            "description": "The position of the plot within the grid layout.  The two integers specified are row and column position.",
            "isRequired": false,
            "rOrderNum": 22
        },
        {
            "name": "PLOTS.SPAN",
            "listType": "integer",
            "listSize": 2,
            "checkDuplicates": false,
            "allowsLists": true,
            "Type": "integer",
            "datatype": "INTEGER",
            "description": "For a grid layer, the number of rows and columns for a plot to span.  If it is not specified, the value is (1, 1).  If plots overlap an error is generated.",
            "isRequired": false,
            "rOrderNum": 23
        },
        {
            "name": "PLOTS.TITLE",
            "allowsLists": false,
            "Type": "string",
            "datatype": "STRING",
            "description": "The title of individual plots / charts.",
            "isRequired": false,
            "rOrderNum": 24
        },
        {
            "name": "PLOTS.TYPE",
            "defaultValue": "line",
            "permittedValues": [
                "line",
                "corr",
                "scatter",
                "bar",
                "mesh",
                "wiggle",
                "geometry"
            ],
            "allowsLists": false,
            "Type": "string",
            "datatype": "STRING",
            "description": "The type of the plot.  It can be 'line', 'corr', etc.  The default is 'line'.",
            "isRequired": false,
            "rOrderNum": 25
        },
        {
            "name": "PLOTS.SERIES",
            "allowsLists": false,
            "Type": "GROUPSTART",
            "datatype": "GROUPSTART",
            "description": "It is used to specify a data series for a plot.  It contains an array of series entries, separate by comma.",
            "isRequired": false,
            "rOrderNum": 26
        },
        {
            "name": "PLOTS.SERIES.ID",
            "listType": "integer",
            "defaultValue": 1,
            "lowerBound": 1,
            "lowerBoundType": "INCLUSIVE",
            "allowNaN": false,
            "allowsLists": true,
            "Type": "integer",
            "datatype": "INTEGER",
            "description": "It is used to explicitly identify a data series in ID_SEQUENCE array within a SERIES_SPEC.  ID_SEQUENCE is an optional declaration.  It is only used for the TD_PLOT utility function to identify a sequence of series or matrices to plot.  It is used in conjunction with the ID FUNC_PARAM that is defined for TD_PLOT. The ID_SEQUENCE contains a JSON object with name-value pairs. Here, each name corresponds to a SERIES_ID field, with its associated value indicating the desired values.  Note that the fields specified in ID_SEQUENCE must exactly match the field names and order of field names that are indicated in the SERIES_ID, or an error will occur. The value starts from 1.  If not specified, it is 1.",
            "isRequired": false,
            "rOrderNum": 27
        },
        {
            "name": "PLOTS.SERIES.NAME",
            "listType": "string",
            "allowsLists": true,
            "Type": "string",
            "datatype": "STRING",
            "description": "The series name when legend is displayed.  If not specified, it is generated using the SERIES_ID values.",
            "isRequired": false,
            "rOrderNum": 28
        },
        {
            "name": "PLOTS.SERIES.FORMAT",
            "listType": "string",
            "allowsLists": true,
            "Type": "string",
            "datatype": "STRING",
            "description": "The quick format parsing matches Matplotlib\u2019s quick format. If the whole format string matches a color name then the specified color is used.  Otherwise, the format string is parsed such that single character colors, single character markers, line styles, and CN colors (i.e. C0, C1, \u2026, C9) are expected to be specified in that single string. For example, since \u2018co\u2019 does not match a color name it is parsed as \u2018c\u2019 which matches color cyan, and \u2018o\u2019 which matches the circle marker. It is possible to specify the format for all series in a plot.  For instance, it is possible to specify all series to use a circle marker.  If a series has a format as well, it will override the plot format.",
            "isRequired": false,
            "rOrderNum": 29
        },
        {
            "name": "PLOTS.SERIES.COLOR",
            "listType": "string",
            "allowsLists": true,
            "Type": "string",
            "datatype": "STRING",
            "description": "The color specification matches Matplotlib\u2019s color specifications ( https://matplotlib.org/users/colors.html ). By default, if the color is not specified, its color is chosen based on the CN (i.e. C0, C1, \u2026, C9) value. Additional xkcd color names are available.  Please see https://xkcd.com/color/rgb/ for the complete list. Also, just as Matplotlib does, the word 'grey' in names is replaced with 'gray.' If plot color setting is specified, it will be used for any series that does not have color setting explicitly specified.",
            "isRequired": false,
            "rOrderNum": 30
        },
        {
            "name": "PLOTS.SERIES.LINESTYLE",
            "listType": "string",
            "defaultValue": "-",
            "allowsLists": true,
            "Type": "string",
            "datatype": "STRING",
            "description": "The line styles here match Matplotlib\u2019s line styles ( https://matplotlib.org/gallery/lines_bars_and_markers/line_styles_reference.html ).  The default is a solid \u2018-\u2018.",
            "isRequired": false,
            "rOrderNum": 31
        },
        {
            "name": "PLOTS.SERIES.LINEWIDTH",
            "listType": "double",
            "defaultValue": 1.5,
            "lowerBound": 0.5,
            "upperBound": 10,
            "lowerBoundType": "INCLUSIVE",
            "upperBoundType": "INCLUSIVE",
            "allowNaN": false,
            "allowsLists": true,
            "Type": "double",
            "datatype": "DOUBLE",
            "description": "The thickness of the line.  If not specified, the line width is 1.5 in point size.  The value range is [0.5, 10].",
            "isRequired": false,
            "rOrderNum": 32
        },
        {
            "name": "PLOTS.SERIES.MARKER",
            "listType": "string",
            "allowsLists": true,
            "Type": "string",
            "datatype": "STRING",
            "description": "The marker styles match Matplotlib\u2019s marker styles ( https://matplotlib.org/api/markers_api.html ).  For a more visual list of the markers, see https://matplotlib.org/examples/lines_bars_and_markers/marker_reference.html . The default is no marker.",
            "isRequired": false,
            "rOrderNum": 33
        },
        {
            "name": "PLOTS.SERIES.MARKERSIZE",
            "listType": "double",
            "defaultValue": 6.0,
            "lowerBound": 1.0,
            "upperBound": 20,
            "lowerBoundType": "INCLUSIVE",
            "upperBoundType": "INCLUSIVE",
            "allowNaN": false,
            "allowsLists": true,
            "Type": "double",
            "datatype": "DOUBLE",
            "description": "The marker size.  If not specified, the marker size is 6 in point size.  It is basically the scaling factor for different markers.  Each marker is drawn relative to this size.  Naturally, a circle maker will be drawn at a bigger size than a point marker, at the same marker size.  The value range is [1.0, 20].",
            "isRequired": false,
            "rOrderNum": 34
        },
        {
            "name": "PLOTS.SERIES_GROUPEND",
            "allowsLists": false,
            "Type": "GROUPEND",
            "datatype": "GROUPEND",
            "description": "It is used to specify a data series for a plot.  It contains an array of series entries, separate by comma.",
            "isRequired": true,
            "rOrderNum": 35
        },
        {
            "name": "PLOTS.XLABEL",
            "allowsLists": false,
            "Type": "string",
            "datatype": "STRING",
            "description": "The X-Axis label.  If it is not specified, the ROW_AXIS column name is used.",
            "isRequired": false,
            "rOrderNum": 36
        },
        {
            "name": "PLOTS.YLABEL",
            "allowsLists": false,
            "Type": "string",
            "datatype": "STRING",
            "description": "The Y-Axis label.  If it is not specified, the first PAYLOAD column is used.",
            "isRequired": false,
            "rOrderNum": 37
        },
        {
            "name": "PLOTS.XFORMAT",
            "allowsLists": false,
            "Type": "string",
            "datatype": "STRING",
            "description": "The format of the x-axis tick value.  If the row axis is SEQUENCE, then it is for a numeric value.  If the row axis is TIMECODE, then the format is for DATE / TIME / TIMESTAMP values.  Format here refers to Teradata\u2019s column format phrases.",
            "isRequired": false,
            "rOrderNum": 38
        },
        {
            "name": "PLOTS.YFORMAT",
            "allowsLists": false,
            "Type": "string",
            "datatype": "STRING",
            "description": "The format of the y-axis tick value.  The format is for a numeric value.  Format here refers to Teradata\u2019s column format phrases.",
            "isRequired": false,
            "rOrderNum": 39
        },
        {
            "name": "PLOTS.XRANGE",
            "listType": "double",
            "listSize": 2,
            "checkDuplicates": false,
            "allowsLists": true,
            "Type": "double",
            "datatype": "DOUBLE",
            "description": "The optional range for the X-Axis for line/scatter plots.",
            "isRequired": false,
            "rOrderNum": 40
        },
        {
            "name": "PLOTS.YRANGE",
            "listType": "double",
            "listSize": 2,
            "checkDuplicates": false,
            "allowsLists": true,
            "Type": "double",
            "datatype": "DOUBLE",
            "description": "The optional range for the Y-Axis for line/scatter plots.",
            "isRequired": false,
            "rOrderNum": 41
        },
        {
            "name": "PLOTS.FLIPX",
            "allowsLists": false,
            "Type": "boolean",
            "datatype": "BOOLEAN",
            "description": "If the value is 1, flip the X-axis so that its range is reversed.",
            "isRequired": false,
            "rOrderNum": 42
        },
        {
            "name": "PLOTS.FLIPY",
            "allowsLists": false,
            "Type": "boolean",
            "datatype": "BOOLEAN",
            "description": "If the value is 1, flip the Y-axis so that its range is reversed.",
            "isRequired": false,
            "rOrderNum": 43
        },
        {
            "name": "PLOTS.LEGEND",
            "permittedValues": [
                "upper right",
                "upper left",
                "lower right",
                "lower left",
                "right",
                "center left",
                "center right",
                "lower center",
                "upper center",
                "center",
                "best"
            ],
            "allowsLists": false,
            "Type": "string",
            "datatype": "STRING",
            "description": "The legend location matches Matplotlib\u2019s legend location names ( https://matplotlib.org/api/_as_gen/matplotlib.PyPlot.legend.html ).  If not specified, the legend is not generated.",
            "isRequired": false,
            "rOrderNum": 44
        },
        {
            "name": "PLOTS.GRID",
            "allowsLists": false,
            "Type": "GROUPSTART",
            "datatype": "GROUPSTART",
            "description": "The grid.  If not specified, the grid is not generated.",
            "isRequired": false,
            "rOrderNum": 45
        },
        {
            "name": "PLOTS.GRID.FORMAT",
            "allowsLists": false,
            "Type": "string",
            "datatype": "STRING",
            "description": "The quick format parsing matches Matplotlib\u2019s quick format. If the whole format string matches a color name then the specified color is used.  Otherwise, the format string is parsed such that single character colors, single character markers, line styles, and CN colors (i.e. C0, C1, \u2026, C9) are expected to be specified in that single string. For example, since \u2018co\u2019 does not match a color name it is parsed as \u2018c\u2019 which matches color cyan, and \u2018o\u2019 which matches the circle marker. It is possible to specify the format for all series in a plot.  For instance, it is possible to specify all series to use a circle marker.  If a series has a format as well, it will override the plot format.",
            "isRequired": false,
            "rOrderNum": 46
        },
        {
            "name": "PLOTS.GRID.COLOR",
            "defaultValue": "#b0b0b0",
            "allowsLists": false,
            "Type": "string",
            "datatype": "STRING",
            "description": "The color specification matches Matplotlib\u2019s color specifications ( https://matplotlib.org/users/colors.html ). By default, if the color is not specified, its color is chosen based on the CN (i.e. C0, C1, \u2026, C9) value. Additional xkcd color names are available.  Please see https://xkcd.com/color/rgb/ for the complete list. Also, just as Matplotlib does, the word 'grey' in names is replaced with 'gray.' If plot color setting is specified, it will be used for any series that does not have color setting explicitly specified.",
            "isRequired": false,
            "rOrderNum": 47
        },
        {
            "name": "PLOTS.GRID.LINESTYLE",
            "defaultValue": "-",
            "allowsLists": false,
            "Type": "string",
            "datatype": "STRING",
            "description": "The line styles here match Matplotlib\u2019s line styles ( https://matplotlib.org/gallery/lines_bars_and_markers/line_styles_reference.html ).  The default is a solid \u2018-\u2018.",
            "isRequired": false,
            "rOrderNum": 48
        },
        {
            "name": "PLOTS.GRID.LINEWIDTH",
            "defaultValue": 0.8,
            "lowerBound": 0.5,
            "upperBound": 10,
            "lowerBoundType": "INCLUSIVE",
            "upperBoundType": "INCLUSIVE",
            "allowsLists": false,
            "Type": "double",
            "datatype": "DOUBLE",
            "description": "The thickness of the line.  If not specified, the line width is 1.5 in point size.  The value range is [0.5, 10].",
            "isRequired": false,
            "rOrderNum": 49
        },
        {
            "name": "PLOTS.GRID_GROUPEND",
            "allowsLists": false,
            "Type": "GROUPEND",
            "datatype": "GROUPEND",
            "description": "The grid.  If not specified, the grid is not generated.",
            "isRequired": true,
            "rOrderNum": 50
        },
        {
            "name": "PLOTS.COLORMAP",
            "allowsLists": false,
            "Type": "GROUPSTART",
            "datatype": "GROUPSTART",
            "description": "Mesh / geometry plot settings.  They are ignored if the plot is not a mesh / geometry plot.",
            "isRequired": false,
            "rOrderNum": 51
        },
        {
            "name": "PLOTS.COLORMAP.NAME",
            "defaultValue": "viridis",
            "allowsLists": false,
            "Type": "string",
            "datatype": "STRING",
            "description": "The name of the color map to be used with mesh plot.  The default is \u2018viridis\u2019.",
            "isRequired": false,
            "rOrderNum": 52
        },
        {
            "name": "PLOTS.COLORMAP.COLORBAR",
            "allowsLists": false,
            "Type": "boolean",
            "datatype": "BOOLEAN",
            "description": "If the value is 1, the color bar is drawn.",
            "isRequired": false,
            "rOrderNum": 53
        },
        {
            "name": "PLOTS.COLORMAP.RANGE",
            "listType": "double",
            "length": 2,
            "checkDuplicates": false,
            "allowsLists": true,
            "Type": "double",
            "datatype": "DOUBLE",
            "description": "The range of the color map.  By default the range is the range of the payload data.",
            "isRequired": false,
            "rOrderNum": 54
        },
        {
            "name": "PLOTS.COLORMAP_GROUPEND",
            "allowsLists": false,
            "Type": "GROUPEND",
            "datatype": "GROUPEND",
            "description": "Mesh / geometry plot settings.  They are ignored if the plot is not a mesh / geometry plot.",
            "isRequired": true,
            "rOrderNum": 55
        },
        {
            "name": "PLOTS.WIGGLE",
            "allowsLists": false,
            "Type": "GROUPSTART",
            "datatype": "GROUPSTART",
            "description": "Seismic wiggle plot settings.  They are ignored if the plot is not a seismic wiggle plot.",
            "isRequired": false,
            "rOrderNum": 56
        },
        {
            "name": "PLOTS.WIGGLE.FILL",
            "lowerBound": 0,
            "upperBound": 1,
            "lowerBoundType": "INCLUSIVE",
            "upperBoundType": "INCLUSIVE",
            "permittedValues": [
                0,
                1
            ],
            "allowsLists": false,
            "Type": "integer",
            "datatype": "INTEGER",
            "description": "If the value is 0, only lines were drawn.  If the value is 1, the positive halves are filled.",
            "isRequired": false,
            "rOrderNum": 57
        },
        {
            "name": "PLOTS.WIGGLE.SCALE",
            "defaultValue": 1.0,
            "lowerBound": 1.0,
            "upperBound": 20,
            "lowerBoundType": "INCLUSIVE",
            "upperBoundType": "INCLUSIVE",
            "allowsLists": false,
            "Type": "double",
            "datatype": "DOUBLE",
            "description": "By default, 2x RMS (root-mean-square) of the payload data is used to determine the range of the wiggle.  SCALE value is multiplied with this range to change the size of wiggle.",
            "isRequired": false,
            "rOrderNum": 58
        },
        {
            "name": "PLOTS.WIGGLE_GROUPEND",
            "allowsLists": false,
            "Type": "GROUPEND",
            "datatype": "GROUPEND",
            "description": "Seismic wiggle plot settings.  They are ignored if the plot is not a seismic wiggle plot.",
            "isRequired": true,
            "rOrderNum": 59
        },
        {
            "name": "PLOTS_GROUPEND",
            "allowsLists": false,
            "Type": "GROUPEND",
            "datatype": "GROUPEND",
            "description": "Multiple plots can be specified.  It contains an array of plot entries, separated by comma.",
            "isRequired": true,
            "rOrderNum": 60
        },
        {
            "name": "IMAGE",
            "defaultValue": "PNG",
            "allowsLists": false,
            "Type": "string",
            "datatype": "STRING",
            "description": "The type of the output image.  It can be 'svg', 'jpg', or 'png'.  The default is 'png'.",
            "isRequired": false,
            "rOrderNum": 61
        },
        {
            "name": "DPI",
            "lowerBound": 72,
            "upperBound": 300,
            "lowerBoundType": "INCLUSIVE",
            "upperBoundType": "INCLUSIVE",
            "allowsLists": false,
            "Type": "integer",
            "datatype": "INTEGER",
            "description": "The DPI (dots per inch) of the output image.  DPI (or dots per inch) specifies the number of pixels per inch.  This setting is used to scale fonts, or any settings are point size based. For SVG format, the default DPI is 72, which corresponds to the typical screen resolution (in old days).  For other image output formats such as PNG, JPG, the default DPI is 100.  Again, these values corresponds to Matplotlib\u2019s defaults. The valid range of DPI is 72 to 300.",
            "isRequired": false,
            "rOrderNum": 62
        },
        {
            "name": "WIDTH",
            "defaultValue": 640,
            "lowerBound": 300,
            "upperBound": 4096,
            "lowerBoundType": "INCLUSIVE",
            "upperBoundType": "INCLUSIVE",
            "allowsLists": false,
            "Type": "integer",
            "datatype": "INTEGER",
            "description": "The width of the image.  By default, it is 640.  The value range is [400, 4096].  The total size of the image should not exceed 4,000,000 pixels.",
            "isRequired": false,
            "rOrderNum": 63
        },
        {
            "name": "HEIGHT",
            "defaultValue": 480,
            "lowerBound": 300,
            "upperBound": 4096,
            "lowerBoundType": "INCLUSIVE",
            "upperBoundType": "INCLUSIVE",
            "allowsLists": false,
            "Type": "integer",
            "datatype": "INTEGER",
            "description": "The height of the image.  By default, it is 480.  The value range is [400, 4096].  The total size of the image should not exceed 4,000,000 pixels.",
            "isRequired": false,
            "rOrderNum": 64
        }
    ]
}
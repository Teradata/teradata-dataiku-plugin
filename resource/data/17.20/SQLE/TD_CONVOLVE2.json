{
    "JSONVersion": "1",
    "FuncRName": "...",
    "MaxInputFiles": 2,
    "IsPlottable": true,
    "InputFmt": true,
    "OutputFmt": false,
    "function_type": "uaf",
    "json_schema_major_version": "1",
    "json_schema_minor_version": "2",
    "json_content_version": "1",
    "function_name": "TD_CONVOLVE2",
    "function_r_name": "aa.td_convolve2",
    "ref_function_r_name": "aa.td_convolve2",
    "function_version": "...",
    "short_description": "TD_CONVOLVE2 expands the DSP processing to the image domain",
    "long_description": "This function, the TD_CONVOLVE2, takes two matrices as inputs: one representing the source matrix (image) to be filtered; and, the other matrix being the PSF itself.  The resultant output is the source matrix with the filtering PSF applied.",
    "input_tables": [
        {
            "LangName": "data or object or newdata or ... --> Langauges team can work with UAF team to come up with this field",
            "requiredInputKind": [
                "PartitionByNone"
            ],
            "isOrdered": false,
            "partitionByOne": false,
            "alternateNames": [],
            "isRequired": true,
            "description": "The source series to be filtered",
            "rDescription": "The source series to be filtered",
            "datatype": "TABLE_ALIAS",
            "allowsLists": false,
            "name": "Input",
            "rName": "Input",
            "useInR": true,
            "rOrderNum": 1,
            "uaf": {
                "requiredUafKind": [
                    "MATRIX"
                ],
                "is_row_sequence": "SEQUENCE",
                "is_col_sequence": "SEQUENCE",
                "row_axis_name": "",
                "column_axis_name": "",
                "id_name": "",
                "id_sequence": "",
                "payload_fields": "",
                "payload_content": "",
                "layer": "",
                "where": "",
                "time_duration": "",
                "time_zero": "",
                "time_type": "",
                "seq_zero": "",
                "interval": "Off",
                "details": true,
                "instance_names": "",
                "data_type": "",
                "payload_start_value": "",
                "payload_offset_value": "",
                "payload_num_entries": "",
                "index": 0
            },
            "uafType": "MATRIX"
        },
        {
            "LangName": "data or object or newdata or ... --> Langauges team can work with UAF team to come up with this field",
            "requiredInputKind": [
                "PartitionByNone"
            ],
            "isOrdered": false,
            "partitionByOne": false,
            "alternateNames": [],
            "isRequired": true,
            "description": "The filter kernel itself",
            "rDescription": "The filter kernel itself",
            "datatype": "TABLE_ALIAS",
            "allowsLists": false,
            "name": "Input2",
            "rName": "Input2",
            "useInR": true,
            "rOrderNum": 2,
            "uaf": {
                "requiredUafKind": [
                    "MATRIX"
                ],
                "is_row_sequence": "SEQUENCE",
                "is_col_sequence": "SEQUENCE",
                "row_axis_name": "",
                "column_axis_name": "",
                "id_name": "",
                "id_sequence": "",
                "payload_fields": "",
                "payload_content": "",
                "layer": "",
                "where": "",
                "time_duration": "",
                "time_zero": "",
                "time_type": "",
                "seq_zero": "",
                "interval": "Off",
                "details": true,
                "instance_names": "",
                "data_type": "",
                "payload_start_value": "",
                "payload_offset_value": "",
                "payload_num_entries": "",
                "index": 1
            },
            "uafType": "MATRIX"
        }
    ],
    "output_tables": [
        {
            "Type": "ART",
            "PrimaryLayer": true,
            "LayerName": "ARTPRIMARY",
            "ResultTableColumnTypes": [
                "integer",
                "integer",
                "float",
                "float"
            ],
            "LangName": "data or object or newdata or ... --> Langauges team can work with UAF team to come up with this field",
            "isOutputTable": true,
            "omitPossible": true,
            "partitionByOne": false,
            "alternateNames": [],
            "isRequired": false,
            "description": "The TD_CONVOLVE2 function returns only a primary result set.   There are no secondary or tertiary result sets produced by this function.  The primary result set can be retrieved by issuing a SELECT against the analytical table containing the results.",
            "rDescription": "The TD_CONVOLVE2 function returns only a primary result set.   There are no secondary or tertiary result sets produced by this function.  The primary result set can be retrieved by issuing a SELECT against the analytical table containing the results.",
            "datatype": "TABLE_NAME",
            "allowsLists": false,
            "name": "OutputTable1",
            "rName": "OutputTable1",
            "useInR": true,
            "rOrderNum": 3
        }
    ],
    "argument_clauses": [
        {
            "name": "InputFormat",
            "defaultValue": "",
            "permittedValues": [
                "INPUT_MODE(ONE2ONE)",
                "INPUT_MODE(MANY2ONE)",
                "INPUT_MODE(MATCH)"
            ],
            "allowsLists": false,
            "Type": "string",
            "datatype": "STRING",
            "description": "Input format",
            "isRequired": true,
            "rOrderNum": 4
        },
        {
            "name": "ALGORITHM",
            "permittedValues": [
                "CONV_SUMMATION",
                "CONV_DFFT"
            ],
            "allowsLists": false,
            "Type": "string",
            "datatype": "STRING",
            "description": "Optional Parameter.  Mainly a feature intended for testing.   Bypasses the internal planning and  forces a particular convolution algorithm to be applied.     Choices are: 'CONV_SUMMATION', or 'CONV_DFFT'.  If an attempt is made to force the CONV_SUMMATION approach when either matrix has greater than 128 by 128 entries, a SQL error is returned to the caller.     When this parameter is NOT PRESENT, the internal planning logic will select the best option, dependent upon the number of entries in the source input matrix.    ",
            "isRequired": false,
            "rOrderNum": 5
        }
    ]
}